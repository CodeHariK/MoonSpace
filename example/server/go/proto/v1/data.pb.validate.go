// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: data.proto

package spacev1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on Destination with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Destination) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Destination with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DestinationMultiError, or
// nil if none found.
func (m *Destination) ValidateAll() error {
	return m.validate(true)
}

func (m *Destination) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Ref

	// no validation rules for Name

	// no validation rules for Country

	// no validation rules for Continent

	// no validation rules for KnownFor

	// no validation rules for ImageUrl

	if len(errors) > 0 {
		return DestinationMultiError(errors)
	}

	return nil
}

// DestinationMultiError is an error wrapping multiple validation errors
// returned by Destination.ValidateAll() if the designated constraints aren't met.
type DestinationMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DestinationMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DestinationMultiError) AllErrors() []error { return m }

// DestinationValidationError is the validation error returned by
// Destination.Validate if the designated constraints aren't met.
type DestinationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DestinationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DestinationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DestinationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DestinationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DestinationValidationError) ErrorName() string { return "DestinationValidationError" }

// Error satisfies the builtin error interface
func (e DestinationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDestination.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DestinationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DestinationValidationError{}

// Validate checks the field values on Activity with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Activity) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Activity with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ActivityMultiError, or nil
// if none found.
func (m *Activity) ValidateAll() error {
	return m.validate(true)
}

func (m *Activity) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Ref

	// no validation rules for Name

	// no validation rules for Description

	// no validation rules for LocationName

	// no validation rules for Duration

	// no validation rules for TimeOfDay

	// no validation rules for FamilyFriendly

	// no validation rules for Price

	// no validation rules for DestinationRef

	// no validation rules for ImageUrl

	if len(errors) > 0 {
		return ActivityMultiError(errors)
	}

	return nil
}

// ActivityMultiError is an error wrapping multiple validation errors returned
// by Activity.ValidateAll() if the designated constraints aren't met.
type ActivityMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ActivityMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ActivityMultiError) AllErrors() []error { return m }

// ActivityValidationError is the validation error returned by
// Activity.Validate if the designated constraints aren't met.
type ActivityValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ActivityValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ActivityValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ActivityValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ActivityValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ActivityValidationError) ErrorName() string { return "ActivityValidationError" }

// Error satisfies the builtin error interface
func (e ActivityValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sActivity.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ActivityValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ActivityValidationError{}

// Validate checks the field values on GetDestinationRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetDestinationRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetDestinationRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetDestinationRequestMultiError, or nil if none found.
func (m *GetDestinationRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetDestinationRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Ref

	if len(errors) > 0 {
		return GetDestinationRequestMultiError(errors)
	}

	return nil
}

// GetDestinationRequestMultiError is an error wrapping multiple validation
// errors returned by GetDestinationRequest.ValidateAll() if the designated
// constraints aren't met.
type GetDestinationRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetDestinationRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetDestinationRequestMultiError) AllErrors() []error { return m }

// GetDestinationRequestValidationError is the validation error returned by
// GetDestinationRequest.Validate if the designated constraints aren't met.
type GetDestinationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDestinationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDestinationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDestinationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDestinationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDestinationRequestValidationError) ErrorName() string {
	return "GetDestinationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetDestinationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDestinationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDestinationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDestinationRequestValidationError{}

// Validate checks the field values on ListDestinationsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListDestinationsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListDestinationsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListDestinationsRequestMultiError, or nil if none found.
func (m *ListDestinationsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListDestinationsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ListDestinationsRequestMultiError(errors)
	}

	return nil
}

// ListDestinationsRequestMultiError is an error wrapping multiple validation
// errors returned by ListDestinationsRequest.ValidateAll() if the designated
// constraints aren't met.
type ListDestinationsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListDestinationsRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListDestinationsRequestMultiError) AllErrors() []error { return m }

// ListDestinationsRequestValidationError is the validation error returned by
// ListDestinationsRequest.Validate if the designated constraints aren't met.
type ListDestinationsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListDestinationsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListDestinationsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListDestinationsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListDestinationsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListDestinationsRequestValidationError) ErrorName() string {
	return "ListDestinationsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListDestinationsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListDestinationsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListDestinationsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListDestinationsRequestValidationError{}

// Validate checks the field values on ListDestinationsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListDestinationsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListDestinationsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListDestinationsResponseMultiError, or nil if none found.
func (m *ListDestinationsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListDestinationsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetDestinations() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListDestinationsResponseValidationError{
						field:  fmt.Sprintf("Destinations[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListDestinationsResponseValidationError{
						field:  fmt.Sprintf("Destinations[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListDestinationsResponseValidationError{
					field:  fmt.Sprintf("Destinations[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListDestinationsResponseMultiError(errors)
	}

	return nil
}

// ListDestinationsResponseMultiError is an error wrapping multiple validation
// errors returned by ListDestinationsResponse.ValidateAll() if the designated
// constraints aren't met.
type ListDestinationsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListDestinationsResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListDestinationsResponseMultiError) AllErrors() []error { return m }

// ListDestinationsResponseValidationError is the validation error returned by
// ListDestinationsResponse.Validate if the designated constraints aren't met.
type ListDestinationsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListDestinationsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListDestinationsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListDestinationsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListDestinationsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListDestinationsResponseValidationError) ErrorName() string {
	return "ListDestinationsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListDestinationsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListDestinationsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListDestinationsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListDestinationsResponseValidationError{}

// Validate checks the field values on CreateDestinationRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateDestinationRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateDestinationRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateDestinationRequestMultiError, or nil if none found.
func (m *CreateDestinationRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateDestinationRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetDestination()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateDestinationRequestValidationError{
					field:  "Destination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateDestinationRequestValidationError{
					field:  "Destination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDestination()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateDestinationRequestValidationError{
				field:  "Destination",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateDestinationRequestMultiError(errors)
	}

	return nil
}

// CreateDestinationRequestMultiError is an error wrapping multiple validation
// errors returned by CreateDestinationRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateDestinationRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateDestinationRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateDestinationRequestMultiError) AllErrors() []error { return m }

// CreateDestinationRequestValidationError is the validation error returned by
// CreateDestinationRequest.Validate if the designated constraints aren't met.
type CreateDestinationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateDestinationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateDestinationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateDestinationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateDestinationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateDestinationRequestValidationError) ErrorName() string {
	return "CreateDestinationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateDestinationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateDestinationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateDestinationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateDestinationRequestValidationError{}

// Validate checks the field values on UpdateDestinationRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateDestinationRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateDestinationRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateDestinationRequestMultiError, or nil if none found.
func (m *UpdateDestinationRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateDestinationRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetDestination()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateDestinationRequestValidationError{
					field:  "Destination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateDestinationRequestValidationError{
					field:  "Destination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDestination()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateDestinationRequestValidationError{
				field:  "Destination",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateDestinationRequestMultiError(errors)
	}

	return nil
}

// UpdateDestinationRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateDestinationRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateDestinationRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateDestinationRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateDestinationRequestMultiError) AllErrors() []error { return m }

// UpdateDestinationRequestValidationError is the validation error returned by
// UpdateDestinationRequest.Validate if the designated constraints aren't met.
type UpdateDestinationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateDestinationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateDestinationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateDestinationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateDestinationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateDestinationRequestValidationError) ErrorName() string {
	return "UpdateDestinationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateDestinationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateDestinationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateDestinationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateDestinationRequestValidationError{}

// Validate checks the field values on DeleteDestinationRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteDestinationRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteDestinationRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteDestinationRequestMultiError, or nil if none found.
func (m *DeleteDestinationRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteDestinationRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Ref

	if len(errors) > 0 {
		return DeleteDestinationRequestMultiError(errors)
	}

	return nil
}

// DeleteDestinationRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteDestinationRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteDestinationRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteDestinationRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteDestinationRequestMultiError) AllErrors() []error { return m }

// DeleteDestinationRequestValidationError is the validation error returned by
// DeleteDestinationRequest.Validate if the designated constraints aren't met.
type DeleteDestinationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteDestinationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteDestinationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteDestinationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteDestinationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteDestinationRequestValidationError) ErrorName() string {
	return "DeleteDestinationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteDestinationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteDestinationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteDestinationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteDestinationRequestValidationError{}

// Validate checks the field values on GetActivityRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetActivityRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetActivityRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetActivityRequestMultiError, or nil if none found.
func (m *GetActivityRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetActivityRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Ref

	if len(errors) > 0 {
		return GetActivityRequestMultiError(errors)
	}

	return nil
}

// GetActivityRequestMultiError is an error wrapping multiple validation errors
// returned by GetActivityRequest.ValidateAll() if the designated constraints
// aren't met.
type GetActivityRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetActivityRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetActivityRequestMultiError) AllErrors() []error { return m }

// GetActivityRequestValidationError is the validation error returned by
// GetActivityRequest.Validate if the designated constraints aren't met.
type GetActivityRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetActivityRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetActivityRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetActivityRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetActivityRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetActivityRequestValidationError) ErrorName() string {
	return "GetActivityRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetActivityRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetActivityRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetActivityRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetActivityRequestValidationError{}

// Validate checks the field values on ListActivitiesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListActivitiesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListActivitiesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListActivitiesRequestMultiError, or nil if none found.
func (m *ListActivitiesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListActivitiesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for DestinationRef

	if len(errors) > 0 {
		return ListActivitiesRequestMultiError(errors)
	}

	return nil
}

// ListActivitiesRequestMultiError is an error wrapping multiple validation
// errors returned by ListActivitiesRequest.ValidateAll() if the designated
// constraints aren't met.
type ListActivitiesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListActivitiesRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListActivitiesRequestMultiError) AllErrors() []error { return m }

// ListActivitiesRequestValidationError is the validation error returned by
// ListActivitiesRequest.Validate if the designated constraints aren't met.
type ListActivitiesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListActivitiesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListActivitiesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListActivitiesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListActivitiesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListActivitiesRequestValidationError) ErrorName() string {
	return "ListActivitiesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListActivitiesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListActivitiesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListActivitiesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListActivitiesRequestValidationError{}

// Validate checks the field values on ListActivitiesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListActivitiesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListActivitiesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListActivitiesResponseMultiError, or nil if none found.
func (m *ListActivitiesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListActivitiesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetActivities() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListActivitiesResponseValidationError{
						field:  fmt.Sprintf("Activities[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListActivitiesResponseValidationError{
						field:  fmt.Sprintf("Activities[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListActivitiesResponseValidationError{
					field:  fmt.Sprintf("Activities[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListActivitiesResponseMultiError(errors)
	}

	return nil
}

// ListActivitiesResponseMultiError is an error wrapping multiple validation
// errors returned by ListActivitiesResponse.ValidateAll() if the designated
// constraints aren't met.
type ListActivitiesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListActivitiesResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListActivitiesResponseMultiError) AllErrors() []error { return m }

// ListActivitiesResponseValidationError is the validation error returned by
// ListActivitiesResponse.Validate if the designated constraints aren't met.
type ListActivitiesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListActivitiesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListActivitiesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListActivitiesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListActivitiesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListActivitiesResponseValidationError) ErrorName() string {
	return "ListActivitiesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListActivitiesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListActivitiesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListActivitiesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListActivitiesResponseValidationError{}

// Validate checks the field values on CreateActivityRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateActivityRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateActivityRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateActivityRequestMultiError, or nil if none found.
func (m *CreateActivityRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateActivityRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetActivity()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateActivityRequestValidationError{
					field:  "Activity",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateActivityRequestValidationError{
					field:  "Activity",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetActivity()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateActivityRequestValidationError{
				field:  "Activity",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateActivityRequestMultiError(errors)
	}

	return nil
}

// CreateActivityRequestMultiError is an error wrapping multiple validation
// errors returned by CreateActivityRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateActivityRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateActivityRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateActivityRequestMultiError) AllErrors() []error { return m }

// CreateActivityRequestValidationError is the validation error returned by
// CreateActivityRequest.Validate if the designated constraints aren't met.
type CreateActivityRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateActivityRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateActivityRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateActivityRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateActivityRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateActivityRequestValidationError) ErrorName() string {
	return "CreateActivityRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateActivityRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateActivityRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateActivityRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateActivityRequestValidationError{}

// Validate checks the field values on UpdateActivityRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateActivityRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateActivityRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateActivityRequestMultiError, or nil if none found.
func (m *UpdateActivityRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateActivityRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetActivity()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateActivityRequestValidationError{
					field:  "Activity",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateActivityRequestValidationError{
					field:  "Activity",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetActivity()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateActivityRequestValidationError{
				field:  "Activity",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateActivityRequestMultiError(errors)
	}

	return nil
}

// UpdateActivityRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateActivityRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateActivityRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateActivityRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateActivityRequestMultiError) AllErrors() []error { return m }

// UpdateActivityRequestValidationError is the validation error returned by
// UpdateActivityRequest.Validate if the designated constraints aren't met.
type UpdateActivityRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateActivityRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateActivityRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateActivityRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateActivityRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateActivityRequestValidationError) ErrorName() string {
	return "UpdateActivityRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateActivityRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateActivityRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateActivityRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateActivityRequestValidationError{}

// Validate checks the field values on DeleteActivityRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteActivityRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteActivityRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteActivityRequestMultiError, or nil if none found.
func (m *DeleteActivityRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteActivityRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Ref

	if len(errors) > 0 {
		return DeleteActivityRequestMultiError(errors)
	}

	return nil
}

// DeleteActivityRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteActivityRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteActivityRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteActivityRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteActivityRequestMultiError) AllErrors() []error { return m }

// DeleteActivityRequestValidationError is the validation error returned by
// DeleteActivityRequest.Validate if the designated constraints aren't met.
type DeleteActivityRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteActivityRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteActivityRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteActivityRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteActivityRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteActivityRequestValidationError) ErrorName() string {
	return "DeleteActivityRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteActivityRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteActivityRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteActivityRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteActivityRequestValidationError{}

// Validate checks the field values on BookingRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *BookingRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BookingRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in BookingRequestMultiError,
// or nil if none found.
func (m *BookingRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *BookingRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for DestinationRef

	if all {
		switch v := interface{}(m.GetStartDate()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, BookingRequestValidationError{
					field:  "StartDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, BookingRequestValidationError{
					field:  "StartDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStartDate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BookingRequestValidationError{
				field:  "StartDate",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetEndDate()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, BookingRequestValidationError{
					field:  "EndDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, BookingRequestValidationError{
					field:  "EndDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEndDate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BookingRequestValidationError{
				field:  "EndDate",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for UserId

	if len(errors) > 0 {
		return BookingRequestMultiError(errors)
	}

	return nil
}

// BookingRequestMultiError is an error wrapping multiple validation errors
// returned by BookingRequest.ValidateAll() if the designated constraints
// aren't met.
type BookingRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BookingRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BookingRequestMultiError) AllErrors() []error { return m }

// BookingRequestValidationError is the validation error returned by
// BookingRequest.Validate if the designated constraints aren't met.
type BookingRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BookingRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BookingRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BookingRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BookingRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BookingRequestValidationError) ErrorName() string { return "BookingRequestValidationError" }

// Error satisfies the builtin error interface
func (e BookingRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBookingRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BookingRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BookingRequestValidationError{}

// Validate checks the field values on BookingResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *BookingResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BookingResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// BookingResponseMultiError, or nil if none found.
func (m *BookingResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *BookingResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for BookingId

	// no validation rules for Status

	if len(errors) > 0 {
		return BookingResponseMultiError(errors)
	}

	return nil
}

// BookingResponseMultiError is an error wrapping multiple validation errors
// returned by BookingResponse.ValidateAll() if the designated constraints
// aren't met.
type BookingResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BookingResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BookingResponseMultiError) AllErrors() []error { return m }

// BookingResponseValidationError is the validation error returned by
// BookingResponse.Validate if the designated constraints aren't met.
type BookingResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BookingResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BookingResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BookingResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BookingResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BookingResponseValidationError) ErrorName() string { return "BookingResponseValidationError" }

// Error satisfies the builtin error interface
func (e BookingResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBookingResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BookingResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BookingResponseValidationError{}

// Validate checks the field values on EmptyResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *EmptyResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EmptyResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in EmptyResponseMultiError, or
// nil if none found.
func (m *EmptyResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *EmptyResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return EmptyResponseMultiError(errors)
	}

	return nil
}

// EmptyResponseMultiError is an error wrapping multiple validation errors
// returned by EmptyResponse.ValidateAll() if the designated constraints
// aren't met.
type EmptyResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EmptyResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EmptyResponseMultiError) AllErrors() []error { return m }

// EmptyResponseValidationError is the validation error returned by
// EmptyResponse.Validate if the designated constraints aren't met.
type EmptyResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EmptyResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EmptyResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EmptyResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EmptyResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EmptyResponseValidationError) ErrorName() string { return "EmptyResponseValidationError" }

// Error satisfies the builtin error interface
func (e EmptyResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEmptyResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EmptyResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EmptyResponseValidationError{}
