// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: data.proto

package spacev1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/codeharik/moonspace/proto/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// TravelServiceName is the fully-qualified name of the TravelService service.
	TravelServiceName = "moon.space.v1.TravelService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// TravelServiceGetDestinationProcedure is the fully-qualified name of the TravelService's
	// GetDestination RPC.
	TravelServiceGetDestinationProcedure = "/moon.space.v1.TravelService/GetDestination"
	// TravelServiceSearchDestinationsProcedure is the fully-qualified name of the TravelService's
	// SearchDestinations RPC.
	TravelServiceSearchDestinationsProcedure = "/moon.space.v1.TravelService/SearchDestinations"
	// TravelServiceListDestinationsProcedure is the fully-qualified name of the TravelService's
	// ListDestinations RPC.
	TravelServiceListDestinationsProcedure = "/moon.space.v1.TravelService/ListDestinations"
	// TravelServiceCreateDestinationProcedure is the fully-qualified name of the TravelService's
	// CreateDestination RPC.
	TravelServiceCreateDestinationProcedure = "/moon.space.v1.TravelService/CreateDestination"
	// TravelServiceUpdateDestinationProcedure is the fully-qualified name of the TravelService's
	// UpdateDestination RPC.
	TravelServiceUpdateDestinationProcedure = "/moon.space.v1.TravelService/UpdateDestination"
	// TravelServiceDeleteDestinationProcedure is the fully-qualified name of the TravelService's
	// DeleteDestination RPC.
	TravelServiceDeleteDestinationProcedure = "/moon.space.v1.TravelService/DeleteDestination"
	// TravelServiceGetActivityProcedure is the fully-qualified name of the TravelService's GetActivity
	// RPC.
	TravelServiceGetActivityProcedure = "/moon.space.v1.TravelService/GetActivity"
	// TravelServiceListActivitiesProcedure is the fully-qualified name of the TravelService's
	// ListActivities RPC.
	TravelServiceListActivitiesProcedure = "/moon.space.v1.TravelService/ListActivities"
	// TravelServiceCreateActivityProcedure is the fully-qualified name of the TravelService's
	// CreateActivity RPC.
	TravelServiceCreateActivityProcedure = "/moon.space.v1.TravelService/CreateActivity"
	// TravelServiceUpdateActivityProcedure is the fully-qualified name of the TravelService's
	// UpdateActivity RPC.
	TravelServiceUpdateActivityProcedure = "/moon.space.v1.TravelService/UpdateActivity"
	// TravelServiceDeleteActivityProcedure is the fully-qualified name of the TravelService's
	// DeleteActivity RPC.
	TravelServiceDeleteActivityProcedure = "/moon.space.v1.TravelService/DeleteActivity"
	// TravelServiceBookDestinationProcedure is the fully-qualified name of the TravelService's
	// BookDestination RPC.
	TravelServiceBookDestinationProcedure = "/moon.space.v1.TravelService/BookDestination"
)

// TravelServiceClient is a client for the moon.space.v1.TravelService service.
type TravelServiceClient interface {
	GetDestination(context.Context, *connect.Request[v1.GetDestinationRequest]) (*connect.Response[v1.Destination], error)
	SearchDestinations(context.Context, *connect.Request[v1.GetDestinationRequest]) (*connect.Response[v1.ListDestinationsResponse], error)
	ListDestinations(context.Context, *connect.Request[v1.ListDestinationsRequest]) (*connect.Response[v1.ListDestinationsResponse], error)
	CreateDestination(context.Context, *connect.Request[v1.CreateDestinationRequest]) (*connect.Response[v1.Destination], error)
	UpdateDestination(context.Context, *connect.Request[v1.UpdateDestinationRequest]) (*connect.Response[v1.Destination], error)
	DeleteDestination(context.Context, *connect.Request[v1.DeleteDestinationRequest]) (*connect.Response[v1.EmptyResponse], error)
	GetActivity(context.Context, *connect.Request[v1.GetActivityRequest]) (*connect.Response[v1.Activity], error)
	ListActivities(context.Context, *connect.Request[v1.ListActivitiesRequest]) (*connect.Response[v1.ListActivitiesResponse], error)
	CreateActivity(context.Context, *connect.Request[v1.CreateActivityRequest]) (*connect.Response[v1.Activity], error)
	UpdateActivity(context.Context, *connect.Request[v1.UpdateActivityRequest]) (*connect.Response[v1.Activity], error)
	DeleteActivity(context.Context, *connect.Request[v1.DeleteActivityRequest]) (*connect.Response[v1.EmptyResponse], error)
	BookDestination(context.Context, *connect.Request[v1.BookingRequest]) (*connect.Response[v1.BookingResponse], error)
}

// NewTravelServiceClient constructs a client for the moon.space.v1.TravelService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewTravelServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) TravelServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	travelServiceMethods := v1.File_data_proto.Services().ByName("TravelService").Methods()
	return &travelServiceClient{
		getDestination: connect.NewClient[v1.GetDestinationRequest, v1.Destination](
			httpClient,
			baseURL+TravelServiceGetDestinationProcedure,
			connect.WithSchema(travelServiceMethods.ByName("GetDestination")),
			connect.WithClientOptions(opts...),
		),
		searchDestinations: connect.NewClient[v1.GetDestinationRequest, v1.ListDestinationsResponse](
			httpClient,
			baseURL+TravelServiceSearchDestinationsProcedure,
			connect.WithSchema(travelServiceMethods.ByName("SearchDestinations")),
			connect.WithClientOptions(opts...),
		),
		listDestinations: connect.NewClient[v1.ListDestinationsRequest, v1.ListDestinationsResponse](
			httpClient,
			baseURL+TravelServiceListDestinationsProcedure,
			connect.WithSchema(travelServiceMethods.ByName("ListDestinations")),
			connect.WithClientOptions(opts...),
		),
		createDestination: connect.NewClient[v1.CreateDestinationRequest, v1.Destination](
			httpClient,
			baseURL+TravelServiceCreateDestinationProcedure,
			connect.WithSchema(travelServiceMethods.ByName("CreateDestination")),
			connect.WithClientOptions(opts...),
		),
		updateDestination: connect.NewClient[v1.UpdateDestinationRequest, v1.Destination](
			httpClient,
			baseURL+TravelServiceUpdateDestinationProcedure,
			connect.WithSchema(travelServiceMethods.ByName("UpdateDestination")),
			connect.WithClientOptions(opts...),
		),
		deleteDestination: connect.NewClient[v1.DeleteDestinationRequest, v1.EmptyResponse](
			httpClient,
			baseURL+TravelServiceDeleteDestinationProcedure,
			connect.WithSchema(travelServiceMethods.ByName("DeleteDestination")),
			connect.WithClientOptions(opts...),
		),
		getActivity: connect.NewClient[v1.GetActivityRequest, v1.Activity](
			httpClient,
			baseURL+TravelServiceGetActivityProcedure,
			connect.WithSchema(travelServiceMethods.ByName("GetActivity")),
			connect.WithClientOptions(opts...),
		),
		listActivities: connect.NewClient[v1.ListActivitiesRequest, v1.ListActivitiesResponse](
			httpClient,
			baseURL+TravelServiceListActivitiesProcedure,
			connect.WithSchema(travelServiceMethods.ByName("ListActivities")),
			connect.WithClientOptions(opts...),
		),
		createActivity: connect.NewClient[v1.CreateActivityRequest, v1.Activity](
			httpClient,
			baseURL+TravelServiceCreateActivityProcedure,
			connect.WithSchema(travelServiceMethods.ByName("CreateActivity")),
			connect.WithClientOptions(opts...),
		),
		updateActivity: connect.NewClient[v1.UpdateActivityRequest, v1.Activity](
			httpClient,
			baseURL+TravelServiceUpdateActivityProcedure,
			connect.WithSchema(travelServiceMethods.ByName("UpdateActivity")),
			connect.WithClientOptions(opts...),
		),
		deleteActivity: connect.NewClient[v1.DeleteActivityRequest, v1.EmptyResponse](
			httpClient,
			baseURL+TravelServiceDeleteActivityProcedure,
			connect.WithSchema(travelServiceMethods.ByName("DeleteActivity")),
			connect.WithClientOptions(opts...),
		),
		bookDestination: connect.NewClient[v1.BookingRequest, v1.BookingResponse](
			httpClient,
			baseURL+TravelServiceBookDestinationProcedure,
			connect.WithSchema(travelServiceMethods.ByName("BookDestination")),
			connect.WithClientOptions(opts...),
		),
	}
}

// travelServiceClient implements TravelServiceClient.
type travelServiceClient struct {
	getDestination     *connect.Client[v1.GetDestinationRequest, v1.Destination]
	searchDestinations *connect.Client[v1.GetDestinationRequest, v1.ListDestinationsResponse]
	listDestinations   *connect.Client[v1.ListDestinationsRequest, v1.ListDestinationsResponse]
	createDestination  *connect.Client[v1.CreateDestinationRequest, v1.Destination]
	updateDestination  *connect.Client[v1.UpdateDestinationRequest, v1.Destination]
	deleteDestination  *connect.Client[v1.DeleteDestinationRequest, v1.EmptyResponse]
	getActivity        *connect.Client[v1.GetActivityRequest, v1.Activity]
	listActivities     *connect.Client[v1.ListActivitiesRequest, v1.ListActivitiesResponse]
	createActivity     *connect.Client[v1.CreateActivityRequest, v1.Activity]
	updateActivity     *connect.Client[v1.UpdateActivityRequest, v1.Activity]
	deleteActivity     *connect.Client[v1.DeleteActivityRequest, v1.EmptyResponse]
	bookDestination    *connect.Client[v1.BookingRequest, v1.BookingResponse]
}

// GetDestination calls moon.space.v1.TravelService.GetDestination.
func (c *travelServiceClient) GetDestination(ctx context.Context, req *connect.Request[v1.GetDestinationRequest]) (*connect.Response[v1.Destination], error) {
	return c.getDestination.CallUnary(ctx, req)
}

// SearchDestinations calls moon.space.v1.TravelService.SearchDestinations.
func (c *travelServiceClient) SearchDestinations(ctx context.Context, req *connect.Request[v1.GetDestinationRequest]) (*connect.Response[v1.ListDestinationsResponse], error) {
	return c.searchDestinations.CallUnary(ctx, req)
}

// ListDestinations calls moon.space.v1.TravelService.ListDestinations.
func (c *travelServiceClient) ListDestinations(ctx context.Context, req *connect.Request[v1.ListDestinationsRequest]) (*connect.Response[v1.ListDestinationsResponse], error) {
	return c.listDestinations.CallUnary(ctx, req)
}

// CreateDestination calls moon.space.v1.TravelService.CreateDestination.
func (c *travelServiceClient) CreateDestination(ctx context.Context, req *connect.Request[v1.CreateDestinationRequest]) (*connect.Response[v1.Destination], error) {
	return c.createDestination.CallUnary(ctx, req)
}

// UpdateDestination calls moon.space.v1.TravelService.UpdateDestination.
func (c *travelServiceClient) UpdateDestination(ctx context.Context, req *connect.Request[v1.UpdateDestinationRequest]) (*connect.Response[v1.Destination], error) {
	return c.updateDestination.CallUnary(ctx, req)
}

// DeleteDestination calls moon.space.v1.TravelService.DeleteDestination.
func (c *travelServiceClient) DeleteDestination(ctx context.Context, req *connect.Request[v1.DeleteDestinationRequest]) (*connect.Response[v1.EmptyResponse], error) {
	return c.deleteDestination.CallUnary(ctx, req)
}

// GetActivity calls moon.space.v1.TravelService.GetActivity.
func (c *travelServiceClient) GetActivity(ctx context.Context, req *connect.Request[v1.GetActivityRequest]) (*connect.Response[v1.Activity], error) {
	return c.getActivity.CallUnary(ctx, req)
}

// ListActivities calls moon.space.v1.TravelService.ListActivities.
func (c *travelServiceClient) ListActivities(ctx context.Context, req *connect.Request[v1.ListActivitiesRequest]) (*connect.Response[v1.ListActivitiesResponse], error) {
	return c.listActivities.CallUnary(ctx, req)
}

// CreateActivity calls moon.space.v1.TravelService.CreateActivity.
func (c *travelServiceClient) CreateActivity(ctx context.Context, req *connect.Request[v1.CreateActivityRequest]) (*connect.Response[v1.Activity], error) {
	return c.createActivity.CallUnary(ctx, req)
}

// UpdateActivity calls moon.space.v1.TravelService.UpdateActivity.
func (c *travelServiceClient) UpdateActivity(ctx context.Context, req *connect.Request[v1.UpdateActivityRequest]) (*connect.Response[v1.Activity], error) {
	return c.updateActivity.CallUnary(ctx, req)
}

// DeleteActivity calls moon.space.v1.TravelService.DeleteActivity.
func (c *travelServiceClient) DeleteActivity(ctx context.Context, req *connect.Request[v1.DeleteActivityRequest]) (*connect.Response[v1.EmptyResponse], error) {
	return c.deleteActivity.CallUnary(ctx, req)
}

// BookDestination calls moon.space.v1.TravelService.BookDestination.
func (c *travelServiceClient) BookDestination(ctx context.Context, req *connect.Request[v1.BookingRequest]) (*connect.Response[v1.BookingResponse], error) {
	return c.bookDestination.CallUnary(ctx, req)
}

// TravelServiceHandler is an implementation of the moon.space.v1.TravelService service.
type TravelServiceHandler interface {
	GetDestination(context.Context, *connect.Request[v1.GetDestinationRequest]) (*connect.Response[v1.Destination], error)
	SearchDestinations(context.Context, *connect.Request[v1.GetDestinationRequest]) (*connect.Response[v1.ListDestinationsResponse], error)
	ListDestinations(context.Context, *connect.Request[v1.ListDestinationsRequest]) (*connect.Response[v1.ListDestinationsResponse], error)
	CreateDestination(context.Context, *connect.Request[v1.CreateDestinationRequest]) (*connect.Response[v1.Destination], error)
	UpdateDestination(context.Context, *connect.Request[v1.UpdateDestinationRequest]) (*connect.Response[v1.Destination], error)
	DeleteDestination(context.Context, *connect.Request[v1.DeleteDestinationRequest]) (*connect.Response[v1.EmptyResponse], error)
	GetActivity(context.Context, *connect.Request[v1.GetActivityRequest]) (*connect.Response[v1.Activity], error)
	ListActivities(context.Context, *connect.Request[v1.ListActivitiesRequest]) (*connect.Response[v1.ListActivitiesResponse], error)
	CreateActivity(context.Context, *connect.Request[v1.CreateActivityRequest]) (*connect.Response[v1.Activity], error)
	UpdateActivity(context.Context, *connect.Request[v1.UpdateActivityRequest]) (*connect.Response[v1.Activity], error)
	DeleteActivity(context.Context, *connect.Request[v1.DeleteActivityRequest]) (*connect.Response[v1.EmptyResponse], error)
	BookDestination(context.Context, *connect.Request[v1.BookingRequest]) (*connect.Response[v1.BookingResponse], error)
}

// NewTravelServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewTravelServiceHandler(svc TravelServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	travelServiceMethods := v1.File_data_proto.Services().ByName("TravelService").Methods()
	travelServiceGetDestinationHandler := connect.NewUnaryHandler(
		TravelServiceGetDestinationProcedure,
		svc.GetDestination,
		connect.WithSchema(travelServiceMethods.ByName("GetDestination")),
		connect.WithHandlerOptions(opts...),
	)
	travelServiceSearchDestinationsHandler := connect.NewUnaryHandler(
		TravelServiceSearchDestinationsProcedure,
		svc.SearchDestinations,
		connect.WithSchema(travelServiceMethods.ByName("SearchDestinations")),
		connect.WithHandlerOptions(opts...),
	)
	travelServiceListDestinationsHandler := connect.NewUnaryHandler(
		TravelServiceListDestinationsProcedure,
		svc.ListDestinations,
		connect.WithSchema(travelServiceMethods.ByName("ListDestinations")),
		connect.WithHandlerOptions(opts...),
	)
	travelServiceCreateDestinationHandler := connect.NewUnaryHandler(
		TravelServiceCreateDestinationProcedure,
		svc.CreateDestination,
		connect.WithSchema(travelServiceMethods.ByName("CreateDestination")),
		connect.WithHandlerOptions(opts...),
	)
	travelServiceUpdateDestinationHandler := connect.NewUnaryHandler(
		TravelServiceUpdateDestinationProcedure,
		svc.UpdateDestination,
		connect.WithSchema(travelServiceMethods.ByName("UpdateDestination")),
		connect.WithHandlerOptions(opts...),
	)
	travelServiceDeleteDestinationHandler := connect.NewUnaryHandler(
		TravelServiceDeleteDestinationProcedure,
		svc.DeleteDestination,
		connect.WithSchema(travelServiceMethods.ByName("DeleteDestination")),
		connect.WithHandlerOptions(opts...),
	)
	travelServiceGetActivityHandler := connect.NewUnaryHandler(
		TravelServiceGetActivityProcedure,
		svc.GetActivity,
		connect.WithSchema(travelServiceMethods.ByName("GetActivity")),
		connect.WithHandlerOptions(opts...),
	)
	travelServiceListActivitiesHandler := connect.NewUnaryHandler(
		TravelServiceListActivitiesProcedure,
		svc.ListActivities,
		connect.WithSchema(travelServiceMethods.ByName("ListActivities")),
		connect.WithHandlerOptions(opts...),
	)
	travelServiceCreateActivityHandler := connect.NewUnaryHandler(
		TravelServiceCreateActivityProcedure,
		svc.CreateActivity,
		connect.WithSchema(travelServiceMethods.ByName("CreateActivity")),
		connect.WithHandlerOptions(opts...),
	)
	travelServiceUpdateActivityHandler := connect.NewUnaryHandler(
		TravelServiceUpdateActivityProcedure,
		svc.UpdateActivity,
		connect.WithSchema(travelServiceMethods.ByName("UpdateActivity")),
		connect.WithHandlerOptions(opts...),
	)
	travelServiceDeleteActivityHandler := connect.NewUnaryHandler(
		TravelServiceDeleteActivityProcedure,
		svc.DeleteActivity,
		connect.WithSchema(travelServiceMethods.ByName("DeleteActivity")),
		connect.WithHandlerOptions(opts...),
	)
	travelServiceBookDestinationHandler := connect.NewUnaryHandler(
		TravelServiceBookDestinationProcedure,
		svc.BookDestination,
		connect.WithSchema(travelServiceMethods.ByName("BookDestination")),
		connect.WithHandlerOptions(opts...),
	)
	return "/moon.space.v1.TravelService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case TravelServiceGetDestinationProcedure:
			travelServiceGetDestinationHandler.ServeHTTP(w, r)
		case TravelServiceSearchDestinationsProcedure:
			travelServiceSearchDestinationsHandler.ServeHTTP(w, r)
		case TravelServiceListDestinationsProcedure:
			travelServiceListDestinationsHandler.ServeHTTP(w, r)
		case TravelServiceCreateDestinationProcedure:
			travelServiceCreateDestinationHandler.ServeHTTP(w, r)
		case TravelServiceUpdateDestinationProcedure:
			travelServiceUpdateDestinationHandler.ServeHTTP(w, r)
		case TravelServiceDeleteDestinationProcedure:
			travelServiceDeleteDestinationHandler.ServeHTTP(w, r)
		case TravelServiceGetActivityProcedure:
			travelServiceGetActivityHandler.ServeHTTP(w, r)
		case TravelServiceListActivitiesProcedure:
			travelServiceListActivitiesHandler.ServeHTTP(w, r)
		case TravelServiceCreateActivityProcedure:
			travelServiceCreateActivityHandler.ServeHTTP(w, r)
		case TravelServiceUpdateActivityProcedure:
			travelServiceUpdateActivityHandler.ServeHTTP(w, r)
		case TravelServiceDeleteActivityProcedure:
			travelServiceDeleteActivityHandler.ServeHTTP(w, r)
		case TravelServiceBookDestinationProcedure:
			travelServiceBookDestinationHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedTravelServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedTravelServiceHandler struct{}

func (UnimplementedTravelServiceHandler) GetDestination(context.Context, *connect.Request[v1.GetDestinationRequest]) (*connect.Response[v1.Destination], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("moon.space.v1.TravelService.GetDestination is not implemented"))
}

func (UnimplementedTravelServiceHandler) SearchDestinations(context.Context, *connect.Request[v1.GetDestinationRequest]) (*connect.Response[v1.ListDestinationsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("moon.space.v1.TravelService.SearchDestinations is not implemented"))
}

func (UnimplementedTravelServiceHandler) ListDestinations(context.Context, *connect.Request[v1.ListDestinationsRequest]) (*connect.Response[v1.ListDestinationsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("moon.space.v1.TravelService.ListDestinations is not implemented"))
}

func (UnimplementedTravelServiceHandler) CreateDestination(context.Context, *connect.Request[v1.CreateDestinationRequest]) (*connect.Response[v1.Destination], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("moon.space.v1.TravelService.CreateDestination is not implemented"))
}

func (UnimplementedTravelServiceHandler) UpdateDestination(context.Context, *connect.Request[v1.UpdateDestinationRequest]) (*connect.Response[v1.Destination], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("moon.space.v1.TravelService.UpdateDestination is not implemented"))
}

func (UnimplementedTravelServiceHandler) DeleteDestination(context.Context, *connect.Request[v1.DeleteDestinationRequest]) (*connect.Response[v1.EmptyResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("moon.space.v1.TravelService.DeleteDestination is not implemented"))
}

func (UnimplementedTravelServiceHandler) GetActivity(context.Context, *connect.Request[v1.GetActivityRequest]) (*connect.Response[v1.Activity], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("moon.space.v1.TravelService.GetActivity is not implemented"))
}

func (UnimplementedTravelServiceHandler) ListActivities(context.Context, *connect.Request[v1.ListActivitiesRequest]) (*connect.Response[v1.ListActivitiesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("moon.space.v1.TravelService.ListActivities is not implemented"))
}

func (UnimplementedTravelServiceHandler) CreateActivity(context.Context, *connect.Request[v1.CreateActivityRequest]) (*connect.Response[v1.Activity], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("moon.space.v1.TravelService.CreateActivity is not implemented"))
}

func (UnimplementedTravelServiceHandler) UpdateActivity(context.Context, *connect.Request[v1.UpdateActivityRequest]) (*connect.Response[v1.Activity], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("moon.space.v1.TravelService.UpdateActivity is not implemented"))
}

func (UnimplementedTravelServiceHandler) DeleteActivity(context.Context, *connect.Request[v1.DeleteActivityRequest]) (*connect.Response[v1.EmptyResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("moon.space.v1.TravelService.DeleteActivity is not implemented"))
}

func (UnimplementedTravelServiceHandler) BookDestination(context.Context, *connect.Request[v1.BookingRequest]) (*connect.Response[v1.BookingResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("moon.space.v1.TravelService.BookDestination is not implemented"))
}
